// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let currentView = 'day';
let appData = {
    categories: {
        main: ['–ù–µ—Å—É–¥–∞.–ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ', '–ù–µ—Å—É–¥–∞.—Å—Ç—Ä–∞—Ö–æ–≤–∞—è', '—Å–µ–º—å—è.–¥–æ–∫—É–º–µ–Ω—Ç—ã'],
        weekly: ['–∑–¥–æ—Ä–æ–≤—å–µ', '–∞–Ω–≥–ª–∏–π—Å–∫–∏–π', '—Ä–∞–∑–≤–∏—Ç–∏–µ']
    },
    tasks: {
        yearly: [],
        quarterly: [],
        monthly: [],
        weekly: [],
        daily: [],
        regular: [],
        single: [],
        chaos: [],
        weeklyRegular: []
    },
    settings: {
        notifications: true,
        theme: 'light'
    }
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', function() {
    loadData();
    setupNavigation();
    showView('day');
});

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
function setupNavigation() {
    const navButtons = document.querySelectorAll('.nav-btn');
    navButtons.forEach(btn => {
        btn.addEventListener('click', function() {
            const view = this.getAttribute('data-view');
            showView(view);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∫–Ω–æ–ø–∫—É
            navButtons.forEach(b => b.classList.remove('active'));
            this.classList.add('active');
        });
    });
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É –≤–∏–¥–∞–º–∏
function showView(viewName) {
    currentView = viewName;
    const mainContent = document.getElementById('main-content');
    
    switch(viewName) {
        case 'day':
            mainContent.innerHTML = getDayView();
            break;
        case 'calendar':
            mainContent.innerHTML = getCalendarView();
            break;
        case 'week':
            mainContent.innerHTML = getWeekView();
            break;
        case 'chaos':
            mainContent.innerHTML = getChaosView();
            break;
        case 'month':
            mainContent.innerHTML = getMonthView();
            break;
        case 'quarter':
            mainContent.innerHTML = getQuarterView();
            break;
        case 'year':
            mainContent.innerHTML = getYearView();
            break;
        default:
            mainContent.innerHTML = '<p>–†–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ</p>';
    }
}

// –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –≤–∏–¥–æ–≤ (–ø–æ–∫–∞ –ø—Ä–æ—Å—Ç—ã–µ)
function getDayView() {
    return `
        <h2>–ü–ª–∞–Ω—ã –Ω–∞ –¥–µ–Ω—å</h2>
        <div class="day-container">
            <p>–ó–¥–µ—Å—å –±—É–¥—É—Ç –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è</p>
            <button class="btn btn-primary">–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É</button>
        </div>
    `;
}

function getCalendarView() {
    return `
        <h2>–ö–∞–ª–µ–Ω–¥–∞—Ä—å</h2>
        <div class="calendar-container">
            <p>–ó–¥–µ—Å—å –±—É–¥–µ—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä—å</p>
        </div>
    `;
}

function getWeekView() {
    return `
        <h2>–ù–µ–¥–µ–ª—å–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ</h2>
        <div class="week-container">
            <p>–ó–¥–µ—Å—å –±—É–¥—É—Ç –Ω–µ–¥–µ–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏</p>
        </div>
    `;
}

function getChaosView() {
    const chaosItems = appData.tasks.chaos || [];
    
    let html = `
        <h2>–•–∞–æ—Å - –∏–¥–µ–∏ –∏ –º—ã—Å–ª–∏</h2>
        <div class="chaos-container">
            
            <!-- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ -->
            <div class="category-management">
                <h3>–ö–∞—Ç–µ–≥–æ—Ä–∏–∏</h3>
                <div class="category-controls">
                    <input type="text" id="newCategoryInput" placeholder="–ù–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è" class="task-input">
                    <button onclick="addCategory()" class="btn btn-primary">–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é</button>
                </div>
                <div class="categories-list">
                    ${appData.categories.main.map((cat, index) => `
                        <span class="category-tag">
                            ${cat}
                            <button onclick="editCategory(${index}, '${cat}')" class="btn-tiny">‚úèÔ∏è</button>
                            <button onclick="deleteCategory(${index})" class="btn-tiny">üóëÔ∏è</button>
                        </span>
                    `).join('')}
                </div>
            </div>
            
            <!-- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ -->
            <div class="add-task-section">
                <input type="text" id="chaosInput" placeholder="–î–æ–±–∞–≤—å—Ç–µ –∏–¥–µ—é –∏–ª–∏ –∑–∞–¥–∞—á—É..." class="task-input">
                <select id="chaosCategory" class="category-select">
                    <option value="">–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</option>
                    ${appData.categories.main.map(cat => `<option value="${cat}">${cat}</option>`).join('')}
                </select>
                <button onclick="addChaosItem()" class="btn btn-success">–î–æ–±–∞–≤–∏—Ç—å</button>
            </div>
            
            <div class="chaos-list">
    `;
    
    if (chaosItems.length === 0) {
        html += '<p class="empty-message">–ü–æ–∫–∞ –Ω–∏–∫–∞–∫–∏—Ö –∏–¥–µ–π –Ω–µ—Ç. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é!</p>';
    } else {
        chaosItems.forEach((item, index) => {
            html += `
                <div class="chaos-item">
                    <div class="task-content">
                        <span class="task-text">${item.text}</span>
                        ${item.category ? `<span class="task-category">${item.category}</span>` : ''}
                    </div>
                    <div class="task-actions">
                        <button onclick="editChaosItem(${index})" class="btn-small btn-edit">‚úèÔ∏è</button>
                        <button onclick="deleteChaosItem(${index})" class="btn-small btn-delete">üóëÔ∏è</button>
                    </div>
                </div>
            `;
        });
    }
    
    html += `
            </div>
        </div>
    `;
    
    return html;
}

function getMonthView() {
    return `
        <h2>–ú–µ—Å—è—á–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ</h2>
        <div class="month-container">
            <p>–ó–¥–µ—Å—å –±—É–¥—É—Ç –º–µ—Å—è—á–Ω—ã–µ –ø–ª–∞–Ω—ã</p>
        </div>
    `;
}

function getQuarterView() {
    return `
        <h2>–ö–≤–∞—Ä—Ç–∞–ª—å–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ</h2>
        <div class="quarter-container">
            <p>–ó–¥–µ—Å—å –±—É–¥—É—Ç –∫–≤–∞—Ä—Ç–∞–ª—å–Ω—ã–µ –ø–ª–∞–Ω—ã</p>
        </div>
    `;
}

function getYearView() {
    const yearTasks = appData.tasks.yearly || [];
    
    let html = `
        <h2>–ì–æ–¥–æ–≤–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ</h2>
        <div class="year-container">
            <!-- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ -->
            <div class="category-management">
                <h3>–ö–∞—Ç–µ–≥–æ—Ä–∏–∏</h3>
                <div class="category-controls">
                    <input type="text" id="newYearCategoryInput" placeholder="–ù–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è" class="task-input">
                    <button onclick="addYearCategory()" class="btn btn-primary">–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é</button>
                </div>
                <div class="categories-list">
                    ${appData.categories.main.map((cat, index) => `
                        <span class="category-tag">
                            ${cat}
                            <button onclick="editYearCategory(${index}, '${cat}')" class="btn-tiny">‚úèÔ∏è</button>
                            <button onclick="deleteYearCategory(${index})" class="btn-tiny">üóëÔ∏è</button>
                        </span>
                    `).join('')}
                </div>
            </div>
            <!-- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ -->
            <div class="add-year-task">
                <h3>–î–æ–±–∞–≤–∏—Ç—å –≥–æ–¥–æ–≤—É—é –∑–∞–¥–∞—á—É</h3>
                <input type="text" id="yearTaskTitle" placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏" class="task-input">
                <textarea id="yearTaskDescription" placeholder="–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏" class="task-textarea"></textarea>
                <select id="yearTaskCategory" class="category-select">
                    <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é</option>
                    ${appData.categories.main.map(cat => `<option value="${cat}">${cat}</option>`).join('')}
                </select>
                                <select id="yearTaskPriority" class="category-select">
                    <option value="medium">–°—Ä–µ–¥–Ω–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç</option>
                    <option value="high">–í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç</option>
                    <option value="low">–ù–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç</option>
                </select>
                <div class="date-inputs">
                    <label>–ù–∞—á–∞–ª–æ: <input type="date" id="yearTaskStart" class="date-input"></label>
                    <label>–î–µ–¥–ª–∞–π–Ω: <input type="date" id="yearTaskEnd" class="date-input"></label>
                </div>
                <button onclick="addYearTask()" class="btn btn-primary">–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É</button>
            </div>
            
            <!-- –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á -->
            <div class="year-tasks-list">
    `;
    
    if (yearTasks.length === 0) {
        html += '<p class="empty-message">–ü–æ–∫–∞ –Ω–µ—Ç –≥–æ–¥–æ–≤—ã—Ö –∑–∞–¥–∞—á. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é!</p>';
    } else {
        yearTasks.forEach((task, index) => {
            html += `
                <div class="year-task" data-index="${index}">
                    <div class="task-header">
                        <h4>${task.title}</h4>
                        <span class="task-category">${task.category || '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'}</span>
                        <div class="task-actions">
                            <button onclick="editYearTask(${index})" class="btn-small">‚úèÔ∏è</button>
                            <button onclick="deleteYearTask(${index})" class="btn-small">üóëÔ∏è</button>
                        </div>
                    </div>
                    <div class="task-description">${task.description}</div>
                    <div class="task-dates">
                        <span>–ù–∞—á–∞–ª–æ: ${task.startDate || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}</span>
                        <span>–î–µ–¥–ª–∞–π–Ω: ${task.endDate || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}</span>
                    </div>
                    
                    <!-- –≠—Ç–∞–ø—ã –∑–∞–¥–∞—á–∏ -->
                    <div class="task-stages">
                        <h5>–≠—Ç–∞–ø—ã:</h5>
                        ${task.stages && task.stages.length > 0 ? 
                            task.stages.map((stage, stageIndex) => `
                                <div class="stage-item">
                                    <span>${stage.title}</span>
                                    <span class="stage-date">${stage.deadline || ''}</span>
                                    <button onclick="editTaskStage(${index}, ${stageIndex})" class="btn-tiny">‚úèÔ∏è</button>
                                    <button onclick="deleteTaskStage(${index}, ${stageIndex})" class="btn-tiny">üóëÔ∏è</button>
                                </div>
                            `).join('') 
                            : '<p class="no-stages">–≠—Ç–∞–ø–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç</p>'
                        }
                        <button onclick="addTaskStage(${index})" class="btn btn-success btn-small">+ –î–æ–±–∞–≤–∏—Ç—å —ç—Ç–∞–ø</button>
                    </div>
                </div>
            `;
        });
    }
    
    html += `
            </div>
        </div>
    `;
    
    return html;
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ localStorage
function loadData() {
    const savedData = localStorage.getItem('taskPlannerData');
    if (savedData) {
        appData = { ...appData, ...JSON.parse(savedData) };
    }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ localStorage
function saveData() {
    localStorage.setItem('taskPlannerData', JSON.stringify(appData));
}
// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –•–∞–æ—Å–æ–º
function addChaosItem() {
    const input = document.getElementById('chaosInput');
    const categorySelect = document.getElementById('chaosCategory');
    
    const text = input.value.trim();
    if (!text) return;
    
    const newItem = {
        text: text,
        category: categorySelect.value,
        created: new Date().toISOString()
    };
    
    appData.tasks.chaos.push(newItem);
    saveData();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–¥
    showView('chaos');
    
    // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
    setTimeout(() => {
        document.getElementById('chaosInput').value = '';
        document.getElementById('chaosCategory').value = '';
    }, 100);
}

function deleteChaosItem(index) {
    if (confirm('–£–¥–∞–ª–∏—Ç—å —ç—Ç—É –∏–¥–µ—é?')) {
        appData.tasks.chaos.splice(index, 1);
        saveData();
        showView('chaos');
    }
}

function editChaosItem(index) {
    const item = appData.tasks.chaos[index];
    const newText = prompt('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å:', item.text);
    
    if (newText !== null && newText.trim()) {
        appData.tasks.chaos[index].text = newText.trim();
        saveData();
        showView('chaos');
    }
}
// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
function addCategory() {
    const input = document.getElementById('newCategoryInput');
    const categoryName = input.value.trim();
    
    if (!categoryName) {
        alert('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏');
        return;
    }
    
    if (appData.categories.main.includes(categoryName)) {
        alert('–¢–∞–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
        return;
    }
    
    appData.categories.main.push(categoryName);
    saveData();
    showView('chaos');
    
    setTimeout(() => {
        document.getElementById('newCategoryInput').value = '';
    }, 100);
}

function editCategory(index, oldName) {
    const newName = prompt('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', oldName);
    
    if (newName !== null && newName.trim() && newName !== oldName) {
        const trimmedName = newName.trim();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if (appData.categories.main.includes(trimmedName)) {
            alert('–¢–∞–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
            return;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        appData.categories.main[index] = trimmedName;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤–æ –≤—Å–µ—Ö —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–¥–∞—á–∞—Ö —Ö–∞–æ—Å–∞
        appData.tasks.chaos.forEach(item => {
            if (item.category === oldName) {
                item.category = trimmedName;
            }
        });
        
        saveData();
        showView('chaos');
    }
}

function deleteCategory(index) {
    const categoryName = appData.categories.main[index];
    
    if (confirm(`–£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é "${categoryName}"? –í—Å–µ –∑–∞–¥–∞—á–∏ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å—Ç–∞–Ω—É—Ç –±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.`)) {
        // –£–±–∏—Ä–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –≤—Å–µ—Ö –∑–∞–¥–∞—á
        appData.tasks.chaos.forEach(item => {
            if (item.category === categoryName) {
                item.category = '';
            }
        });
        
        // –£–¥–∞–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        appData.categories.main.splice(index, 1);
        saveData();
        showView('chaos');
    }
}
// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≥–æ–¥–æ–≤–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è

// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –≤ –≥–æ–¥–æ–≤–æ–º –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏
function addYearCategory() {
    const input = document.getElementById('newYearCategoryInput');
    const categoryName = input.value.trim();
    
    if (!categoryName) {
        alert('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏');
        return;
    }
    
    if (appData.categories.main.includes(categoryName)) {
        alert('–¢–∞–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
        return;
    }
    
    appData.categories.main.push(categoryName);
    saveData();
    showView('year');
    
    setTimeout(() => {
        document.getElementById('newYearCategoryInput').value = '';
    }, 100);
}

function editYearCategory(index, oldName) {
    const newName = prompt('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', oldName);
    
    if (newName !== null && newName.trim() && newName !== oldName) {
        const trimmedName = newName.trim();
        
        if (appData.categories.main.includes(trimmedName)) {
            alert('–¢–∞–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
            return;
        }
        
        appData.categories.main[index] = trimmedName;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤–æ –≤—Å–µ—Ö –≥–æ–¥–æ–≤—ã—Ö –∑–∞–¥–∞—á–∞—Ö
        appData.tasks.yearly.forEach(task => {
            if (task.category === oldName) {
                task.category = trimmedName;
            }
        });
        
        saveData();
        showView('year');
    }
}

function deleteYearCategory(index) {
    const categoryName = appData.categories.main[index];
    
    if (confirm(`–£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é "${categoryName}"?`)) {
        // –£–±–∏—Ä–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –≤—Å–µ—Ö –∑–∞–¥–∞—á
        appData.tasks.yearly.forEach(task => {
            if (task.category === categoryName) {
                task.category = '';
            }
        });
        
        appData.categories.main.splice(index, 1);
        saveData();
        showView('year');
    }
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥–æ–¥–æ–≤–æ–π –∑–∞–¥–∞—á–∏
function addYearTask() {
    const title = document.getElementById('yearTaskTitle').value.trim();
    const description = document.getElementById('yearTaskDescription').value.trim();
    const category = document.getElementById('yearTaskCategory').value;
    const startDate = document.getElementById('yearTaskStart').value;
    const endDate = document.getElementById('yearTaskEnd').value;
    
    if (!title) {
        alert('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏');
        return;
    }
    
    const newTask = {
        id: Date.now(), // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
        title: title,
        description: description,
        category: category,
        startDate: startDate,
        endDate: endDate,
        stages: [],
        created: new Date().toISOString()
    };
    
    if (!appData.tasks.yearly) {
        appData.tasks.yearly = [];
    }
    
    appData.tasks.yearly.push(newTask);
    saveData();
    showView('year');
    
    // –û—á–∏—â–∞–µ–º –ø–æ–ª—è
    setTimeout(() => {
        document.getElementById('yearTaskTitle').value = '';
        document.getElementById('yearTaskDescription').value = '';
        document.getElementById('yearTaskCategory').value = '';
        document.getElementById('yearTaskStart').value = '';
        document.getElementById('yearTaskEnd').value = '';
    }, 100);
}
// –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–æ–¥–æ–≤–æ–π –∑–∞–¥–∞—á–∏
function editYearTask(index) {
    const task = appData.tasks.yearly[index];
    
    const newTitle = prompt('–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:', task.title);
    if (newTitle === null) return;
    
    const newDescription = prompt('–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:', task.description);
    if (newDescription === null) return;
    
    const newCategory = prompt('–ö–∞—Ç–µ–≥–æ—Ä–∏—è:', task.category);
    if (newCategory === null) return;
    
    const newStartDate = prompt('–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ (YYYY-MM-DD):', task.startDate);
    if (newStartDate === null) return;
    
    const newEndDate = prompt('–î–µ–¥–ª–∞–π–Ω (YYYY-MM-DD):', task.endDate);
    if (newEndDate === null) return;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞—á—É
    appData.tasks.yearly[index] = {
        ...task,
        title: newTitle.trim(),
        description: newDescription.trim(),
        category: newCategory.trim(),
        startDate: newStartDate,
        endDate: newEndDate
    };
    
    saveData();
    showView('year');
}

// –£–¥–∞–ª–µ–Ω–∏–µ –≥–æ–¥–æ–≤–æ–π –∑–∞–¥–∞—á–∏
function deleteYearTask(index) {
    const task = appData.tasks.yearly[index];
    
    if (confirm(`–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É "${task.title}"?`)) {
        appData.tasks.yearly.splice(index, 1);
        saveData();
        showView('year');
    }
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç—Ç–∞–ø–∞ –∫ –∑–∞–¥–∞—á–µ
function addTaskStage(taskIndex) {
    const stageTitle = prompt('–ù–∞–∑–≤–∞–Ω–∏–µ —ç—Ç–∞–ø–∞:');
    if (!stageTitle || !stageTitle.trim()) return;
    
    const stageDeadline = prompt('–î–µ–¥–ª–∞–π–Ω —ç—Ç–∞–ø–∞ (YYYY-MM-DD):');
    
    const newStage = {
        id: Date.now(),
        title: stageTitle.trim(),
        deadline: stageDeadline || '',
        completed: false,
        created: new Date().toISOString()
    };
    
    if (!appData.tasks.yearly[taskIndex].stages) {
        appData.tasks.yearly[taskIndex].stages = [];
    }
    
    appData.tasks.yearly[taskIndex].stages.push(newStage);
    saveData();
    showView('year');
}

// –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç—Ç–∞–ø–∞
function editTaskStage(taskIndex, stageIndex) {
    const stage = appData.tasks.yearly[taskIndex].stages[stageIndex];
    
    const newTitle = prompt('–ù–∞–∑–≤–∞–Ω–∏–µ —ç—Ç–∞–ø–∞:', stage.title);
    if (newTitle === null) return;
    
    const newDeadline = prompt('–î–µ–¥–ª–∞–π–Ω —ç—Ç–∞–ø–∞ (YYYY-MM-DD):', stage.deadline);
    if (newDeadline === null) return;
    
    appData.tasks.yearly[taskIndex].stages[stageIndex] = {
        ...stage,
        title: newTitle.trim(),
        deadline: newDeadline
    };
    
    saveData();
    showView('year');
}

// –£–¥–∞–ª–µ–Ω–∏–µ —ç—Ç–∞–ø–∞
function deleteTaskStage(taskIndex, stageIndex) {
    const stage = appData.tasks.yearly[taskIndex].stages[stageIndex];
    
    if (confirm(`–£–¥–∞–ª–∏—Ç—å —ç—Ç–∞–ø "${stage.title}"?`)) {
        appData.tasks.yearly[taskIndex].stages.splice(stageIndex, 1);
        saveData();
        showView('year');
    }
}
